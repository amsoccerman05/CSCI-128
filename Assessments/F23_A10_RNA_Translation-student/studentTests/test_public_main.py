from gradescope_utils.autograder_utils.decorators import weight, number

from TestingFramework import BaseTest
from StudentSubmission import StudentSubmissionExecutor
from StudentSubmission.Runners import MainModuleRunner
from StudentSubmission.common import PossibleResults


class TestPublicMain(BaseTest):
    FILES = {"test_public/codons.txt": "codons.txt"}

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        StudentSubmissionExecutor.dataDirectory = "./studentTests/data/files/"

    def setUp(self) -> None:
        self.executionEnvironment = StudentSubmissionExecutor.generateNewExecutionEnvironment(self.studentSubmission)
        self.executionEnvironment.files = self.FILES
        self.runner = MainModuleRunner()

    def tearDown(self) -> None:
        StudentSubmissionExecutor.cleanup(self.executionEnvironment)

    def assertStdio(self, stdin: list[str], exepected: list[str]):
        self.executionEnvironment.stdin = stdin

        StudentSubmissionExecutor.execute(self.executionEnvironment, self.runner)

        actual = StudentSubmissionExecutor.getOrAssert(self.executionEnvironment, PossibleResults.STDOUT)

        self.assertCorrectNumberOfOutputLines(exepected, actual)

        for i in range(len(exepected)):
            self.assertMultiLineEqual(exepected[i], actual[i], f"Failed on output line {i + 1} of {len(exepected)}")


    @number(2.1)
    @weight(0.25)
    def test_example_1(self):
        """`Full Execution` - Example 1"""

        stdin = [
            "codons.txt",
            "TTAAACCGGGCCCGGCTACCGACCCATGATTAAACCCTACTCAAATCATT",
        ]

        expectedOutput = ["MAGY"]

        self.assertStdio(stdin, expectedOutput)
                

    @number(2.2)
    @weight(0.25)
    def test_example_2(self):
        """`Full Execution` - Example 2"""
        stdin = [
            "codons.txt",
            "ATTTAAGGGCTACCCAATGATGTTTTTAACGCCCACTGCGGCAAA",
        ]

        expectedOutput = ["MGYYKNCG"]

        self.assertStdio(stdin, expectedOutput)

    @number(2.3)
    @weight(0.25)
    def test_example_3(self):
        """`Full Execution` - Example 3"""
        stdin = [
            "codons.txt",
            "ATATCGCGACGTACAGTGCAGTCTAGGTCACGATCCCATGTG",
        ]

        expectedOutput = ["MSRQIQC"]

        self.assertStdio(stdin, expectedOutput)


    @number(2.4)
    @weight(0.25)
    def test_example_4(self):
        """`Full Execution` - Example 4"""
        stdin = [
            "codons.txt",
            "ATATCGCGACGTACAGGTGCGCCCGCCCTGTAGATGGATAGAGACAGTGTACTCCATGTG",
        ]

        expectedOutput = ["MSTRAGHLPISVT"]

        self.assertStdio(stdin, expectedOutput)


    @number(2.5)
    @weight(1)
    def test_long_dna_string_1(self):
        """`Full Execution` - Long DNA and long protein"""
        stdin = [
            "codons.txt",
            "TACGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCGTTTCATCCATT"
        ]

        expectedOutput = ["MQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSRQSR"]

        self.assertStdio(stdin, expectedOutput)
    

    @number(2.6)
    @weight(1)
    def test_long_dna_string_2(self):
        """`Full Execution` - Long DNA short protein"""
        stdin = [
            "codons.txt",
            "AAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGAAAAAAAAAAAATAAAAAAAATTTTAAAAAAAAACCCCCCCCCGGGGGGGGGGGGTACAACATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAATTTTTTTTTTTTTTCCCCCCCCCGGGGGGGGGGTTTTTTTTTTTTTTTTTTGGGGGGGGCCCCCCCCCAAAAAAAA",
        ]

        expectedOutput = ["ML"]

        self.assertStdio(stdin, expectedOutput)



    @number(2.7)
    @weight(1)
    def test_very_short_dna(self):
        """`Full execution` - Short DNA"""
        stdin = [
            "codons.txt",
            "TACATT"
        ]

        expectedOutput = ["M"]

        self.assertStdio(stdin, expectedOutput)

    @number(2.8)
    @weight(1)
    def test_rick_roll(self):
        """`Full execution` - Rick Astley"""
        # in my defenese there arent many vowles
        stdin = [
            "codons.txt",
            "TACTTGCTCCATCTCTCTCCTTTGTTGCGTCCGTAACAGCTCATGGGTATC"
        ]

        expectedOutput = ["MNEVERGNNAGIVEYP"]

        self.assertStdio(stdin, expectedOutput)





